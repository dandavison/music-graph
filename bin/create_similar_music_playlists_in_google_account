#!/usr/bin/env python
import json
import os
import sys

from sqlalchemy import func
from sqlalchemy import select
import gmusicapi

from music_graph.db.sqla import get_table
from music_graph.db.sqla import fetchall

from music_graph.utils import by
from music_graph.utils import info
from music_graph.utils import warn
from music_graph.playlist import generate_playlist


def is_excluded_artist(mbid):
    tracks_t = get_table('tracks')
    [(n_tracks,)] = (select([func.count('*')])
                     .select_from(tracks_t)
                     .where(tracks_t.c.artist_id == mbid)
                     .execute()
                     .fetchall())
    return n_tracks < 2


def _get_similar_artists(mbid, artists_t, similar_artists_t):
    f = lambda id_1_attrname, id_2_attrname: set(map(tuple, fetchall(
        select([artists_t.c.name, artists_t.c.google_id])
        .select_from(
            artists_t.join(
                similar_artists_t,
                getattr(similar_artists_t.c, id_2_attrname) == artists_t.c.id))
        .where(getattr(similar_artists_t.c, id_1_attrname) == mbid))))

    return (f('artist_1_id', 'artist_2_id') |
            f('artist_2_id', 'artist_1_id'))


if __name__ == '__main__':
    args = sys.argv[1:]
    overwrite = False
    if args:
        assert args == ['-f']
        overwrite = True

    artists_t = get_table('artists')
    similar_artists_t = get_table('similar_artists')
    google_tracks_t = get_table('google_tracks')

    google_tracks = fetchall(select([google_tracks_t]))

    client = gmusicapi.Mobileclient()
    assert client.login(os.environ['GOOGLE_USER'],
                        os.environ['GOOGLE_PASSWORD'],
                        gmusicapi.Mobileclient.FROM_MAC_ADDRESS)

    playlists = by('name', client.get_all_playlists())

    for mbid, artist_name, google_id in (
            fetchall(select([artists_t.c.id,
                             artists_t.c.name,
                             artists_t.c.google_id]))):

        # FIXME: O(N) queries
        if is_excluded_artist(mbid):
            continue

        playlist_name = artist_name
        if playlist_name in playlists:
            if overwrite:
                warn("Deleting playlist '%s'" % playlist_name)
                client.delete_playlist(playlists[playlist_name]['id'])
            else:
                continue

        similar_artists = (
            _get_similar_artists(mbid, artists_t, similar_artists_t))
        similar_artists.add((artist_name, google_id))

        similar_artist_names, similar_artist_google_ids = zip(*similar_artists)

        playlist_tracks = generate_playlist(
            google_tracks,
            similar_artist_google_ids,
            lambda track: track[0])

        if not playlist_tracks:
            warn("No playlist tracks for '%s'" % artist_name)
            continue

        playlist_track_ids = [json.loads(track[1])['id']
                              for track in playlist_tracks]

        try:
            playlist_id = client.create_playlist(playlist_name)
            client.add_songs_to_playlist(playlist_id, playlist_track_ids)
        except gmusicapi.exceptions.CallFailure as ex:
            warn("gmusicapi error: %s" % type(ex).__name__)
        else:
            info("'%s' created similar artist playlist (%d) tracks%s" % (
                artist_name,
                len(playlist_track_ids),
                '\n\t' + '\n\t'.join(sorted(set(similar_artist_names)))))
